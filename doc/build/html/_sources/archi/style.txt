.. _style:

Style
=====

Principe
--------
Les styles (CSS) d'un projet Voozanoo4 ne sont pas gérés via une feuille de styles classique (\*.css). Vu que la couleur dominante d'un 
projet est paramétrable, c'est un algorithme Php qui prend en charge les nuances de couleurs (``Core_Library_Resource_XML_Style``).

C'est le controller ``Index`` du module ``Style`` qui prend en charge la demande de feuille de style et qui manipule ``Core_Library_Resource_XML_Style``. 
C'est donc une Vue (\*.phtml) qui est rendue (celle-ci contient donc des règles CSS et du PHP).

Fonctionnement
--------------
Ce controller accepte le paramètre ``name`` (via l'url), il utilise ce paramètre pour rendre la vue demandée, ``style/index/index/name/foo`` induira le rendue de la vue ``foo.phtml``.

Par défaut le paramètre ``name`` vaut "default", ce qui correspond à la feuille de style du noyau.

Extrait de la vue ``default.phtml``

.. code-block:: css+php
	
	clear { clear:both; }
	.error { background:<?php echo $this->oStyle->ErrorColor(8)?>; border:1px solid <?php echo $this->oStyle->ErrorColor()?>; color:<?php echo $this->oStyle->ErrorColor()?>; font:bold 100% <?php echo $this->oStyle->FontFamily()?>; }
	.warning { background:<?php echo $this->oStyle->WarningColor(8)?>; border:1px solid <?php echo $this->oStyle->WarningColor()?>; color:<?php echo $this->oStyle->WarningColor()?>; font:bold 100% <?php echo $this->oStyle->FontFamily()?>; }
	.notice { background:<?php echo $this->oStyle->NoticeColor(8)?>; border:1px solid <?php echo $this->oStyle->NoticeColor()?>; color:<?php echo $this->oStyle->NoticeColor()?>; font:bold 100% <?php echo $this->oStyle->FontFamily()?>; }
	.info { background:<?php echo $this->oStyle->InfoColor(8)?>; border:1px solid <?php echo $this->oStyle->InfoColor()?>; color:<?php echo $this->oStyle->InfoColor()?>; font:bold 100% <?php echo $this->oStyle->FontFamily()?>; }
	.hidden { visibility:hidden; }
	.waiting-message { background:transparent url("<?php echo $this->oStyle->ImagesURL() ?>/busy.gif") no-repeat top center; padding:20px; text-align:center; }

	body
	{
		font:normal <?php echo $this->oStyle->FontSize()?> <?php echo $this->oStyle->FontFamily()?>;
		color:<?php echo $this->oStyle->BlackColor()?>;
		background: url("<?php echo $this->oStyle->ImagesURL()?>/background.png") repeat-x scroll 0 0 #c8e0e9;
	}
	
Injection des feuilles de style
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
L'injection des feuilles de style s'effectue dans la classe Core_Library_Controller_Action, normalement parente de tout controller Voozanoo4.

La méthode ``init()`` de cette classe appelle ``_addCoreViewScriptPath()`` en charge de fournir des fallback de vue en cas d'absence coté projet. C'est également à cet endroit que la feuille de style du noyau & du projet est ajoutée.

.. note::
	La totalité des vues du noyau utilisent l'aide de vue `headLink <http://framework.zend.com/manual/1.12/en/zend.view.helpers.html#zend.view.helpers.initial.headlink>`_ qui permet de manipuler
	les feuilles de style coté Controller ou coté Vue.
	
	Par conséquent il est recommandé d'utiliser cette aide de vue en cas de surcharge d'une vue Noyau dans un projet (Exemple : ``mainframe.phtml``).
	
Utilisation
-----------
Personnalisation de tout un projet
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Même si la vue ``default.phtml`` inclut plusieurs règles CSS communes et utiles à tout projet Voozanoo 4 il est possible de personnaliser tout un projet pour y inclure une charte graphique propre.

Pour ce faire il suffit de placer la vue ``<nomDuProjet>.phtml`` dans ``modules/style/views/scripts/index/`` coté projet.

Cette vue sera automatiquement utilisée comme feuille de style et incluse après l'inclusion de la feuille de style par défaut, permettant de surcharger / ajouter n'importe quelle règle CSS.

.. note::
	Cette feuille de style sera incluse dans chaque page nativement présente dans Voozanoo4
	
Personnalisation spécifique
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Il est possible d'ajouter une feuille de style précise pour une action spécifique, il suffit d'utiliser l'aide de vue headLink en ajoutant la feuille de style désiré (Css pur ou en pasant par le système de partiel)

.. code-block:: php
	
	<?php
	class Foo_IndexController extends Core_Library_Controller_Action
	{
		public function init()
		{
			parent::init();
			
			//Ajoutera cette CSS pour toutes les actions de ce controller
			$this->view->headLink()->appendStylesheet( $this->view->baseUrl() . '/resources/css/foo.css' ); //Version CSS pure
			
			$this->view->headLink()->appendStylesheet( $oProject->GetURL() . '/style/index/index/name/foo' ); //Version "parsée" par le moteur de style
			
		}
		
		public function barAction()
		{
			//Ajoute cette feuille de style uniquement pour l'action "bar"
			$this->view->headLink()->appendStylesheet( $oProject->GetURL() . '/style/index/index/name/bar' );
		}
		
		//A noter : Les vues doivent effectuer un "echo $this->headLink();" au bon endroit
	}
